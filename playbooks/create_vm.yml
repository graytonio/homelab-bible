#!/usr/bin/env ansible-playbook

# TODO Change to use terraform

- name: Setup Template
  hosts: proxmox
  vars:
   template_id: 9000
   storage: local-lvm
   target: lakeland
   start_vm: true
  vars_prompt:
  - name: hostname
    prompt: VM Name
    private: false
  - name: ip_address
    prompt: IP Address (CIDR)
    private: false
  - name: gateway
    prompt: Gateway IP
    private: false
  - name: disk_space
    prompt: Disk Space (GB)
    private: false
  - name: cpu_cores
    prompt: CPU Cores
    private: false
  - name: ram
    prompt: RAM (GiB)
    private: false
  pre_tasks:
  - name: Verify Inputs
    assert:
      that:
        - hostname is defined
        - hostname is string
        - hostname | length > 0        
        - ip_address | ansible.utils.ipaddr
        - gateway | ansible.utils.ipaddr
        - disk_space | float is number
        - cpu_cores | int is number and cpu_cores | int is integer
        - ram | int is number and ram | int is integer
  - name: Set Facts
    run_once: true
    local_action:
      module: set_fact
      template_id: "{{ template_id }}"
      storage: "{{ storage }}"
      target: "{{ target }}"
      start_vm: "{{ start_vm }}"
      hostname: "{{ hostname }}"
      ip_address: "{{ ip_address }}"
      gateway: "{{ gateway }}"
      disk_space: "{{ disk_space }}"
      cpu_cores: "{{ cpu_cores }}"
      ram: "{{ ram }}"
  roles:
  - role: cloudinit-template
    vars:
      vm_id: "{{ template_id }}"
      default_storage: "{{ storage }}"
      default_user: "{{ ansible }}"
  tasks:
  - name: Find Template Host
    group_by:
      key: "template_host"
    when: not template_exists.failed
  - name: Find Target Host
    group_by:
      key: "target_host"
    when: inventory_hostname == target

- name: Create VM
  hosts: template_host
  vars:
    template_id: '{{ hostvars["localhost"]["template_id"] }}'
    storage: '{{ hostvars["localhost"]["storage"] }}'
    target: '{{ hostvars["localhost"]["target"] }}'
    start_vm: '{{ hostvars["localhost"]["start_vm"] }}'
    hostname: '{{ hostvars["localhost"]["hostname"] }}'
  tasks:
  - name: Check if Provided VM/Hostname already exist
    find:
      paths: /etc/pve/nodes
      recurse: yes
      patterns: "*.conf"
      contains: 'name\:\s{{ hostname }}'
    register: vm_exists

  - name: End if VM already Exists
    fail: msg="vm {{ hostname }} already exists"
    when: vm_exists.matched >= 1

  - name: Fetch Next VM ID
    shell: echo $(pvesh get /cluster/nextid)
    register: vm_id_shell
    failed_when: vm_id_shell.stdout == ""

  - name: Register VM ID
    set_fact:
      vm_id: "{{ vm_id_shell.stdout }}"

  - name: Create VM
    shell: |
      qm clone {{ template_id }} {{ vm_id }} --format raw --full 1 --name {{ hostname }} --storage {{ storage }} --target {{ target }} > /dev/null
      echo $vmid
    register: qm_output
    failed_when: qm_output.stderr != ""

- name: Configure VM Hardware
  vars:
    vm_id: '{{ hostvars[template_host]["vm_id"] }}'
    gateway: '{{ hostvars["localhost"]["gateway"] }}'
    ip_address: '{{ hostvars["localhost"]["ip_address"] }}'
    disk_space: '{{ hostvars["localhost"]["disk_space"] }}'
    cpu_cores: '{{ hostvars["localhost"]["cpu_cores"] }}'
    ram: '{{ hostvars["localhost"]["ram"] }}'
  hosts: target_host
  tasks:
  - name: Allow time for vm to be fully created
    pause:
      seconds: 60

  - name: Add IP Address to Cloud Init
    shell: qm set {{ vm_id }} --ipconfig0 gw={{ gateway }},ip={{ ip_address }}

  - name: Update Disk Space
    shell: qm resize {{ vm_id }} scsi0 +{{ disk_space }}G

  - name: Update CPU Cores
    shell: qm set {{ vm_id }} --cores {{ cpu_cores }}

  - name: Update RAM
    shell: qm set {{ vm_id }} --memory {{ ram | int * 1024 }}

  - name: End Play if not Wanting to Start VMs
    meta: end_play
    when: not start_vm

  - name: Start VM
    shell: qm start {{ vm_id }}

  - name: Allow Cloud-Init Process to Finish
    pause:
      seconds: 240

  - name: Shutdown VM
    shell: qm shutdown {{ vm_id }}

  - name: Remove Cloud Init Drive
    shell: qm unlink {{ vm_id }} --idlist ide2

  - name: Enable qmeu guest agent
    shell: qm set {{ vm_id }} --agent 1

  - name: Start VM
    shell: qm start {{ vm_id }}

  - name: Wait for VM to boot
    pause:
      seconds: 60
